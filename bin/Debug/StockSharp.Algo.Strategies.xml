<?xml version="1.0"?>
<doc>
  <assembly>
    <name>StockSharp.Algo.Strategies</name>
  </assembly>
  <members>
    <member name="T:StockSharp.Algo.Strategies.Analytics.BaseAnalyticsStrategy">
      <summary>
            Базовая аналитическая стратегия.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.Strategy">
      <summary>
            Базовый класс для всех торговых стратегий.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.#ctor">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Strategies.Strategy" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.SafeGetConnector">
      <summary>
            Получить получение стратегии <see cref="P:StockSharp.Algo.Strategies.Strategy.Connector" />. Если оно не инициализивано, то будет выбрашено исключение.
            </summary>
      <returns>Подключение.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.RaiseParametersChanged(System.String)">
      <summary>
            Вызвать события <see cref="E:StockSharp.Algo.Strategies.Strategy.ParametersChanged" /> и <see cref="E:StockSharp.Algo.Strategies.Strategy.PropertyChanged" />.
            </summary>
      <param name="name">Название параметра.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.RaiseProcessStateChanged(StockSharp.Algo.Strategies.Strategy)">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.Strategies.Strategy.ProcessStateChanged" />.
            </summary>
      <param name="strategy">Стратегия.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnStarted">
      <summary>
            Метод вызывается тогда, когда вызвался метод <see cref="M:StockSharp.Algo.Strategies.Strategy.Start" />, и состояние <see cref="P:StockSharp.Algo.Strategies.Strategy.ProcessState" /> перешло в значение <see cref="F:StockSharp.Algo.ProcessStates.Started" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnStopping">
      <summary>
            Метод вызывается тогда, когда состояние процесса <see cref="P:StockSharp.Algo.Strategies.Strategy.ProcessState" /> перешло в значение <see cref="F:StockSharp.Algo.ProcessStates.Stopping" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnStopped">
      <summary>
            Метод вызывается тогда, когда состояние процесса <see cref="P:StockSharp.Algo.Strategies.Strategy.ProcessState" /> перешло в значение <see cref="F:StockSharp.Algo.ProcessStates.Stopped" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.RegisterOrder(StockSharp.BusinessEntities.Order)">
      <summary>
            Зарегистрировать заявку и автоматически добавить для запуска механизмов расчета прибыли-убытка и проскальзывания.
            </summary>
      <param name="order">Заявка.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.ReRegisterOrder(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order)">
      <summary>
            Перерегистрировать заявку и автоматически добавить для запуска механизмов расчета прибыли-убытка и проскальзывания.
            </summary>
      <param name="oldOrder">Заявка, которую нужно снять и на основе нее зарегистрировать новую.</param>
      <param name="newOrder">Новая заявка.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.CancelOrder(StockSharp.BusinessEntities.Order)">
      <summary>
            Отменить заявку.
            </summary>
      <param name="order">Заявка для отмены.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.AttachOrder(StockSharp.BusinessEntities.Order,System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.MyTrade})">
      <summary>
            Добавить активную заявку в стратегию и обработать сделки по заявке.
            </summary>
      <remarks>
            Используется для восстановления состояния стратегии, когда необходимо
            подписаться на получение данных по заявкам, зарегистрированным ранее.
            </remarks>
      <param name="order">Заявка.</param>
      <param name="myTrades">Сделки по заявке.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.AssignOrderStrategyId(StockSharp.BusinessEntities.Order)">
      <summary>
            Установить идентификатор стратегии для заявки.
            </summary>
      <param name="order">Заявка, для которой необходимо установить идентификатор стратегии.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.RaiseLog(StockSharp.Logging.LogMessage)">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Logging.ILogSource.Log" />.
            </summary>
      <param name="message">Отладочное сообщение.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.Start">
      <summary>
            Запустить торговый алгоритм.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.Stop">
      <summary>
            Остановить торговый алгоритм.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.Reset">
      <summary>
            Переинициализировать торговый алгоритм.
            Вызывается после инициализации объекта стратегии и загрузки сохраненных параметров.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnReseted">
      <summary>
            Вызывается из метода <see cref="M:StockSharp.Algo.Strategies.Strategy.Reset" />. 
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.SuspendRules">
      <summary>
            Приостановить исполнение правил до следующего восстановления через метод <see cref="M:StockSharp.Algo.Strategies.Strategy.ResumeRules" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.ResumeRules">
      <summary>
            Восстановить исполнение правил, остановленное через метод <see cref="M:StockSharp.Algo.Strategies.Strategy.SuspendRules" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnPositionsChanged(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Position})">
      <summary>
            Метод, который вызывается при изменении позиций стратегии.
            </summary>
      <param name="positions">Измененные позиции стратегии.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnNewMyTrades(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.MyTrade})">
      <summary>
            Метод, который вызывается при появлении новых сделок стратегии.
            </summary>
      <param name="trades">Новые сделки стратегии.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnOrderRegistering(StockSharp.BusinessEntities.Order)">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.Strategies.Strategy.OrderRegistering" />.
            </summary>
      <param name="order">Заявка.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnOrderRegistered(StockSharp.BusinessEntities.Order)">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.Strategies.Strategy.OrderRegistered" />.
            </summary>
      <param name="order">Заявка.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnStopOrderRegistering(StockSharp.BusinessEntities.Order)">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.Strategies.Strategy.StopOrderRegistering" />.
            </summary>
      <param name="order">Стоп-заявка.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnStopOrderRegistered(StockSharp.BusinessEntities.Order)">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.Strategies.Strategy.StopOrderRegistered" />.
            </summary>
      <param name="order">Стоп-заявка.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnStopOrderCanceling(StockSharp.BusinessEntities.Order)">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.Strategies.Strategy.StopOrderRegistered" />.
            </summary>
      <param name="order">Стоп-заявка.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnOrderCanceling(StockSharp.BusinessEntities.Order)">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.Strategies.Strategy.OrderRegistered" />.
            </summary>
      <param name="order">Заявка.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnStopOrderReRegistering(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order)">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.Strategies.Strategy.StopOrderReRegistering" />.
            </summary>
      <param name="oldOrder">Стоп-заявка, которую нужно снять.</param>
      <param name="newOrder">Новая стоп-заявка, которую нужно зарегистрировать.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnOrderReRegistering(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order)">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.Strategies.Strategy.OrderReRegistering" />.
            </summary>
      <param name="oldOrder">Заявка, которую нужно снять.</param>
      <param name="newOrder">Новая заявка, которую нужно зарегистрировать.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnOrderChanged(StockSharp.BusinessEntities.Order)">
      <summary>
            Метод, который вызывается при изменении заявки стратегии.
            </summary>
      <param name="order">Измененная заявка.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnStopOrderChanged(StockSharp.BusinessEntities.Order)">
      <summary>
            Метод, который вызывается при изменении стоп-заявки стратегии.
            </summary>
      <param name="order">Измененная стоп-заявка.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnStopOrdersChanged(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order})">
      <summary>
            Метод, который вызывается при изменении стоп-заявок стратегии.
            </summary>
      <param name="orders">Измененные стоп-заявки.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnOrderRegisterFailed(StockSharp.BusinessEntities.OrderFail)">
      <summary>
            Метод, который вызывается при ошибке регистрации заявки стратегии.
            </summary>
      <param name="fail">Ошибка регистрации заявки.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnStopOrderRegisterFailed(StockSharp.BusinessEntities.OrderFail)">
      <summary>
            Метод, который вызывается при ошибке регистрации стоп-заявки стратегии.
            </summary>
      <param name="fail">Ошибка регистрации стоп-заявки.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.ProcessNewOrders(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order})">
      <summary>
            Обработать поступившие от подключения <see cref="P:StockSharp.Algo.Strategies.Strategy.Connector" /> заявки, и найти из них те, что принадлежат стратегии.
            </summary>
      <param name="newOrders">Новые заявки.</param>
      <returns>Заявки, принадлежащие стратегии.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.Load(Ecng.Serialization.SettingsStorage)">
      <summary>
            Загрузить настройки.
            </summary>
      <param name="storage">Хранилище настроек.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.Save(Ecng.Serialization.SettingsStorage)">
      <summary>
            Сохранить настройки.
            </summary>
      <param name="storage">Хранилище настроек.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.CancelActiveOrders">
      <summary>
            Отменить все активные заявки (стоп и обычные).
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.ProcessCancelActiveOrders">
      <summary>
            Отменить все активные заявки (стоп и обычные).
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnError(System.Exception)">
      <summary>
            Обработка ошибки, полученной в результате работы стратегии.
            </summary>
      <param name="error">Ошибка.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.Clone">
      <summary>
            Создать копию стратегии со всеми настройками.
            </summary>
      <returns>Копия стратегии.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.GetMarketDepth(StockSharp.BusinessEntities.Security)">
      <summary>
            Получить стакан котировок.
            </summary>
      <param name="security">Инструмент, по которому нужно получить стакан.</param>
      <returns>Стакан котировок.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.GetSecurityValue(StockSharp.BusinessEntities.Security,StockSharp.Messages.Level1Fields)">
      <summary>
            Получить значение маркет-данных для инструмента.
            </summary>
      <param name="security">Инструмент.</param>
      <param name="field">Поле маркет-данных.</param>
      <returns>Значение поля. Если данных нет, то будет возвращено <see langword="null" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.GetLevel1Fields(StockSharp.BusinessEntities.Security)">
      <summary>
            Получить набор доступных полей <see cref="T:StockSharp.Messages.Level1Fields" />, для которых есть маркет-данные для инструмента.
            </summary>
      <param name="security">Инструмент.</param>
      <returns>Набор доступных полей.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.Lookup(StockSharp.BusinessEntities.Security)">
      <summary>
            Найти инструменты, соответствующие фильтру <paramref name="criteria" />.
            </summary>
      <param name="criteria">Инструмент, поля которого будут использоваться в качестве фильтра.</param>
      <returns>Найденные инструменты.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.DisposeManaged">
      <summary>
            Освободить занятые ресурсы.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.Id">
      <summary>
            Уникальный идентификатор источника.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.LogLevel">
      <summary>
            Уровень логирования. По-умолчанию установлено в <see cref="F:StockSharp.Logging.LogLevels.Inherit" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.Name">
      <summary>
            Название стратегии.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.NameGenerator">
      <summary>
            Генератор имени стратегии.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.Connector">
      <summary>
            Подключение к торговой системе.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.Portfolio">
      <summary>
            Портфель.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.Security">
      <summary>
            Инструмент.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.Slippage">
      <summary>
            Суммарное значение проскальзывания.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.SlippageChanged">
      <summary>
            Событие изменения <see cref="P:StockSharp.Algo.Strategies.Strategy.Slippage" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.PnLManager">
      <summary>
            Менеджер прибыли-убытка. Учитывает сделки данной стратегии, а так же ее дочерних стратегий <see cref="P:StockSharp.Algo.Strategies.Strategy.ChildStrategies" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.PnL">
      <summary>
            Суммарное значение прибыли-убытка без учета комиссии <see cref="P:StockSharp.Algo.Strategies.Strategy.Commission" />.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.PnLChanged">
      <summary>
            Событие изменения <see cref="P:StockSharp.Algo.Strategies.Strategy.PnL" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.Commission">
      <summary>
            Суммарное значение комиссии.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.CommissionChanged">
      <summary>
            Событие изменения <see cref="P:StockSharp.Algo.Strategies.Strategy.Commission" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.PositionManager">
      <summary>
            Менеджер позиции. Учитывает сделки данной стратегии, а так же ее дочерних стратегий <see cref="P:StockSharp.Algo.Strategies.Strategy.ChildStrategies" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.Position">
      <summary>
            Суммарное значение позиции.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.PositionChanged">
      <summary>
            Событие изменения <see cref="P:StockSharp.Algo.Strategies.Strategy.Position" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.Latency">
      <summary>
            Суммарное значение задержки.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.LatencyChanged">
      <summary>
            Событие изменения <see cref="P:StockSharp.Algo.Strategies.Strategy.Latency" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.StatisticManager">
      <summary>
            Менеджер статистики.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.RiskManager">
      <summary>
            Менеджер контроля рисков.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.Parameters">
      <summary>
            Параметры стратегии.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.ParametersChanged">
      <summary>
            Событие изменения <see cref="P:StockSharp.Algo.Strategies.Strategy.Parameters" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.Environment">
      <summary>
            Параметры окружения стратегии. 
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.MaxErrorCount">
      <summary>
            Максимальное количество ошибок, которое должна получить стратегия прежде, чем она остановил работу.
            </summary>
      <remarks>Значение по умолчанию равно 1.</remarks>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.ErrorCount">
      <summary>
            Текущее количество ошибок.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.ProcessState">
      <summary>
            Состояние работы.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.ProcessStateChanged">
      <summary>
            Событие изменения <see cref="P:StockSharp.Algo.Strategies.Strategy.ProcessState" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.CancelOrdersWhenStopping">
      <summary>
            Снимать активные заявки при остановке. По-умолчанию включено.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.Orders">
      <summary>
            Заявки, зарегистрированные в рамках стратегии.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.StopOrders">
      <summary>
            Стоп-заявки, зарегистрированные в рамках стратегии.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.OrdersKeepTime">
      <summary>
            Время хранения заявок <see cref="P:StockSharp.Algo.Strategies.Strategy.Orders" /> и <see cref="P:StockSharp.Algo.Strategies.Strategy.StopOrders" /> в памяти.
            По-умолчанию равно 2-ум дням. Если значение установлено в <see cref="F:System.TimeSpan.Zero" />, то заявки не будут удаляться.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.MyTrades">
      <summary>
            Cделки, прошедшие в течении работы стратегии.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.OrderFails">
      <summary>
            Заявки с ошибками, зарегистрированные в рамках стратегии.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.Volume">
      <summary>
            Объем, которым необходимо оперировать.
            </summary>
      <remarks>
            Если значение установлено в 0, то параметр игнорируется.
            </remarks>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.ErrorState">
      <summary>
            Состояние ошибки.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.ChildStrategies">
      <summary>
            Дочерние торговые стратегии.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.StartedTime">
      <summary>
            Время запуска стратегии.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.TotalWorkingTime">
      <summary>
            Общее время работы стратегии с вычетом временных отрезков, когда стратегия останавливалась.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.DisposeOnStop">
      <summary>
            Автоматически освобождать занятые ресурсы стратерии при ее остановке
            (состояние <see cref="P:StockSharp.Algo.Strategies.Strategy.ProcessState" /> стало равным <see cref="F:StockSharp.Algo.ProcessStates.Stopped" />)
            и удалять ее из родительской через <see cref="P:StockSharp.Algo.Strategies.Strategy.ChildStrategies" />.
            </summary>
      <remarks>Режим используется только для одноразовых стратегий, тоесть для тех, что не будут запущены повторно (например, котирование).</remarks>
      <remarks>По умолчанию выключено.</remarks>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.WaitAllTrades">
      <summary>
            Останавливать стратегию только после получения всех сделок по зарегистрированным заявкам.
            </summary>
      <remarks>По умолчанию выключено.</remarks>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.CommentOrders">
      <summary>
            Добавлять в <see cref="P:StockSharp.BusinessEntities.Order.Comment" /> название стратегии <see cref="P:StockSharp.Algo.Strategies.Strategy.Name" />, выставившая заявку.
            </summary>
      <remarks>По умолчанию выключено.</remarks>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.Rules">
      <summary>
            Зарегистрированные правила.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.IsRulesSuspended">
      <summary>
            Приостановлено ли исполнение правил.
            </summary>
      <remarks>
            Приостановка правил происходит через метод <see cref="M:StockSharp.Algo.Strategies.Strategy.SuspendRules" />.
            </remarks>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.OrderRegistering">
      <summary>
            Событие отправки заявки на регистрацию.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.OrderRegistered">
      <summary>
            Событие об успешной регистрации заявки.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.OrderRegisterFailed">
      <summary>
            Событие об ошибке регистрации заявки.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.StopOrderRegistering">
      <summary>
            Событие отправки стоп-заявки на регистрацию.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.StopOrderRegistered">
      <summary>
            Событие об успешной регистрации стоп-заявки.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.StopOrderRegisterFailed">
      <summary>
            Событие об ошибке регистрации стоп-заявки.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.OrderChanged">
      <summary>
            Событие об изменении заявки.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.StopOrderChanged">
      <summary>
            Событие об изменении стоп-заявки.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.OrderCanceling">
      <summary>
            Событие отправки заявки на отмену.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.StopOrderCanceling">
      <summary>
            Событие отправки стоп-заявки на отмену.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.OrderReRegistering">
      <summary>
            Событие отправки заявки на перерегистрацию.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.StopOrderReRegistering">
      <summary>
            Событие отправки стоп-заявки на перерегистрацию.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.OrderCancelFailed">
      <summary>
            Событие об ошибке отмены заявки.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.StopOrderCancelFailed">
      <summary>
            Событие об ошибке отмены стоп-заявки.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.NewMyTrades">
      <summary>
            Событие о появлении новых сделок.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.ConnectorChanged">
      <summary>
            Событие изменения подключения стратегии.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.SecurityChanged">
      <summary>
            Событие изменения инструмента стратегии.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.PortfolioChanged">
      <summary>
            Событие изменения портфеля стратегии.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.PositionsChanged">
      <summary>
            Событие изменения позиций стратегии.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.Error">
      <summary>
            Событие возникновения ошибки в стратегии.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.CurrentTime">
      <summary>
            Текущее время, которое будет передано в <see cref="P:StockSharp.Logging.LogMessage.Time" />.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.Reseted">
      <summary>
            Событие переинициализации стратегии.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.UnrealizedPnLInterval">
      <summary>
            Интервал пересчета нереализованной прибыли. Значение по-умолчанию равно 1 минуте.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.PropertyChanged">
      <summary>
            Событие изменения параметров стратегии.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.ValuesChanged">
      <summary>
            Событие изменения инструмента.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.IStrategyChildStrategyList">
      <summary>
            Коллекция дочерних стратегий.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Analytics.BaseAnalyticsStrategy.#ctor">
      <summary>
            Инициализировать <see cref="T:StockSharp.Algo.Strategies.Analytics.BaseAnalyticsStrategy" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Analytics.BaseAnalyticsStrategy.ProcessCancelActiveOrders">
      <summary>
            Отменить все активные заявки (стоп и обычные).
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Analytics.BaseAnalyticsStrategy.OnStarted">
      <summary>
            Метод вызывается тогда, когда вызвался метод <see cref="M:StockSharp.Algo.Strategies.Strategy.Start" />, и состояние <see cref="P:StockSharp.Algo.Strategies.Strategy.ProcessState" /> перешло в значение <see cref="F:StockSharp.Algo.ProcessStates.Started" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Analytics.BaseAnalyticsStrategy.OnAnalyze">
      <summary>
            Анализировать.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Analytics.BaseAnalyticsStrategy.From">
      <summary>
            Дата начала.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Analytics.BaseAnalyticsStrategy.To">
      <summary>
            Дата окончания.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Analytics.BaseAnalyticsStrategy.StorateRegistry">
      <summary>
            Хранилище маркет-данных.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Analytics.BaseAnalyticsStrategy.CurrentTime">
      <summary>
            Текущее время, которое будет передано в <see cref="P:StockSharp.Logging.LogMessage.Time" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Analytics.BaseAnalyticsStrategy.Chart">
      <summary>
            График.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Analytics.BaseAnalyticsStrategy.Grid">
      <summary>
            Таблица.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Analytics.BaseAnalyticsStrategy.StorageFormat">
      <summary>
            Формат данных.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.BasketStrategyFinishModes">
      <summary>
            Условия окончания работы дочерних стратегий.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Strategies.BasketStrategyFinishModes.First">
      <summary>
            Если закончилась хотя бы одна стратегия.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Strategies.BasketStrategyFinishModes.All">
      <summary>
            Если закончились все стратегии.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Strategies.BasketStrategyFinishModes.None">
      <summary>
            Дочерние стратегии никак не зависят друг на друга.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.BasketStrategy">
      <summary>
            Пакетная стратегия, содержащая в себе дочерние стратегии, которые влияют друг на друга своим исполнением.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.BasketStrategy.#ctor(StockSharp.Algo.Strategies.BasketStrategyFinishModes)">
      <summary>
            Создать стратегию.
            </summary>
      <param name="finishMode">Условие окончания работы дочерних стратегий.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.BasketStrategy.OnStarted">
      <summary>
            Метод вызывается тогда, когда вызвался метод <see cref="M:StockSharp.Algo.Strategies.Strategy.Start" />, и состояние <see cref="P:StockSharp.Algo.Strategies.Strategy.ProcessState" /> перешло в значение <see cref="F:StockSharp.Algo.ProcessStates.Started" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.BasketStrategy.DisposeManaged">
      <summary>
            Освободить занятые ресурсы.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.BasketStrategy.FinishMode">
      <summary>
            Условие окончания работы дочерних стратегий.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.BasketStrategy.FirstFinishStrategy">
      <summary>
            Первая остановившаяся дочерняя стратегия. Свойство заполняется при <see cref="P:StockSharp.Algo.Strategies.BasketStrategy.FinishMode" /> равным <see cref="F:StockSharp.Algo.Strategies.BasketStrategyFinishModes.First" />.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.Testing.BatchEmulation">
      <summary>
            Пакетный эмулятор стратегий.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Testing.BatchEmulation.#ctor(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Security},System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Portfolio},StockSharp.Algo.Storages.IStorageRegistry)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Strategies.Testing.BatchEmulation" />.
            </summary>
      <param name="securities">Инструменты, с которыми будет вестись работа.</param>
      <param name="portfolios">Портфели, с которыми будет вестись работа.</param>
      <param name="storageRegistry">Хранилище данных.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Testing.BatchEmulation.#ctor(StockSharp.BusinessEntities.ISecurityProvider,System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Portfolio},StockSharp.Algo.Storages.IStorageRegistry)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Strategies.Testing.BatchEmulation" />.
            </summary>
      <param name="securityProvider">Поставщик информации об инструментах.</param>
      <param name="portfolios">Портфели, с которыми будет вестись работа.</param>
      <param name="storageRegistry">Хранилище данных.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Testing.BatchEmulation.Start(Ecng.Collections.IEnumerableEx{StockSharp.Algo.Strategies.Strategy})">
      <summary>
            Начать эмуляцию.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Testing.BatchEmulation.Stop">
      <summary>
            Остановить эмуляцию.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Testing.BatchEmulation.EmulationSettings">
      <summary>
            Настройки эмуляции.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Testing.BatchEmulation.EmulationConnector">
      <summary>
            Эмуляционное подключение.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Testing.BatchEmulation.Strategies">
      <summary>
            Стратегии для тестирования.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Testing.BatchEmulation.IsFinished">
      <summary>
            Закончил ли эмулятор свою работу по причине окончания данных или он был прерван через метод <see cref="M:StockSharp.Algo.Strategies.Testing.BatchEmulation.Stop" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Testing.BatchEmulation.CurrentProgress">
      <summary>
            Текущий прогресс процесса эмуляции.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Testing.BatchEmulation.TotalProgress">
      <summary>
            Общий прогресс эмуляции.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Testing.BatchEmulation.State">
      <summary>
            Состояние эмулятора.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Testing.BatchEmulation.BatchStrategies">
      <summary>
            Текущие тестируемые стратегии.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Testing.BatchEmulation.StateChanged">
      <summary>
            Событие об изменении состояния эмуляции.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Testing.BatchEmulation.ProgressChanged">
      <summary>
            Событие изменения прогресса эмуляции.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.Protective.AutoProtectiveStrategy">
      <summary>
            Стратегия автоматической защиты позиции.
            </summary>
      <remarks>
            Новые сделки в стратегию поступают через <see cref="M:StockSharp.Algo.Strategies.Protective.AutoProtectiveStrategy.ProcessNewMyTrades(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.MyTrade})" />.
            Они автоматически защищаются с помощью <see cref="T:StockSharp.Algo.Strategies.Protective.TakeProfitStopLossStrategy" />.
            Дополнительно, <see cref="T:StockSharp.Algo.Strategies.Protective.AutoProtectiveStrategy" /> переворачивает стопы в случае переворота позиции.
            </remarks>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Protective.AutoProtectiveStrategy.#ctor">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Strategies.Protective.AutoProtectiveStrategy" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Protective.AutoProtectiveStrategy.OnStarted">
      <summary>
            Метод вызывается тогда, когда вызвался метод <see cref="M:StockSharp.Algo.Strategies.Strategy.Start" />, и состояние <see cref="P:StockSharp.Algo.Strategies.Strategy.ProcessState" /> перешло в значение <see cref="F:StockSharp.Algo.ProcessStates.Started" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Protective.AutoProtectiveStrategy.Protect(System.Decimal)">
      <summary>
            Защитить позицию, которая была обновлена через <see cref="P:StockSharp.Algo.Strategies.Protective.AutoProtectiveStrategy.Item(StockSharp.BusinessEntities.Security)" />.
            </summary>
      <param name="position">Позиция.</param>
      <returns>Защитная стратегия. Если будет возвращено null, значит защита позиции игнорируется.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Protective.AutoProtectiveStrategy.Protect(System.Collections.Generic.IDictionary{StockSharp.BusinessEntities.MyTrade,System.Decimal})">
      <summary>
            Защитить сделки.
            </summary>
      <param name="trades">Сделки. По ключу указана защищаемая сделка, по значению указан объем, который необходимо защитить.</param>
      <returns>Защитные стратегии.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Protective.AutoProtectiveStrategy.Sort(System.Collections.Generic.IEnumerable{System.Linq.IGrouping{System.Tuple{StockSharp.Messages.Sides,System.Decimal},StockSharp.Algo.Strategies.Protective.IProtectiveStrategy}})">
      <summary>
            Отсортировать защитные стратегии для указания наиболее худшей и лучшей по рыночным ценам
            (при частичной закрытие позиции в первую очередь снимаются наиболее худшие).
            </summary>
      <param name="strategies">Защитные стратегии в неотсортированном порядке.</param>
      <returns>Защитные стратегии в отсортированном порядке.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Protective.AutoProtectiveStrategy.GetProtectiveTrades(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.MyTrade},System.Decimal)">
      <summary>
            Получить из всех сделок те, которые необходимо защитить.
            </summary>
      <param name="trades">Новые сделки.</param>
      <param name="maxVolume">Максимальный объем, который необъодимо защитить.</param>
      <returns>Сделки, которые необходимо защитить.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Protective.AutoProtectiveStrategy.ProcessNewMyTrades(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.MyTrade})">
      <summary>
            Обработать сделки для коррекции объема защитных стратегий.
            </summary>
      <param name="trades">Сделки.</param>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Protective.AutoProtectiveStrategy.TakeProfitLevel">
      <summary>
            Защитный уровень для тейк-профита. По-умолчанию уровень равен 0, что означает отключено.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Protective.AutoProtectiveStrategy.StopLossLevel">
      <summary>
            Защитный уровень для стоп-лосса. По-умолчанию уровень равен 0, что означает отключено.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Protective.AutoProtectiveStrategy.StopLossActivationOffset">
      <summary>
            Защитный сдвиг от расcчитанной цены стопа <see cref="P:StockSharp.Algo.Strategies.Protective.ProtectiveStrategy.ActivationPrice" />, который позволяет активировать защиту до достижения рынком данной цены.
            По-умолчанию выключено.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Protective.AutoProtectiveStrategy.IsTrailingStopLoss">
      <summary>
            Использовать ли механизм скольжения для <see cref="T:StockSharp.Algo.Strategies.Protective.StopLossStrategy" />. По-умолчанию выключено.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Protective.AutoProtectiveStrategy.IsTrailingTakeProfit">
      <summary>
            Использовать ли механизм скольжения для <see cref="T:StockSharp.Algo.Strategies.Protective.TakeProfitStrategy" />. По-умолчанию выключено.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Protective.AutoProtectiveStrategy.StopLossTimeOut">
      <summary>
            Ограничение по времени для <see cref="T:StockSharp.Algo.Strategies.Protective.StopLossStrategy" />.
            Если защита не сработает к этому времени, то позиция будет закрыта по рынку.
            По-умолчанию выключено.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Protective.AutoProtectiveStrategy.TakeProfitTimeOut">
      <summary>
            Ограничение по времени для <see cref="T:StockSharp.Algo.Strategies.Protective.TakeProfitStrategy" />.
            Если защита не сработает к этому времени, то позиция будет закрыта по рынку.
            По-умолчанию выключено.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Protective.AutoProtectiveStrategy.Item(StockSharp.BusinessEntities.Security)">
      <summary>
            Получить или установить первоначальную позицию для инструмента.
            </summary>
      <param name="security">Инструмент.</param>
      <returns>Позиция.</returns>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Protective.AutoProtectiveStrategy.MyTradesStrategy">
      <summary>
            Стратегия, новые сделки которой автоматически транслируются в <see cref="M:StockSharp.Algo.Strategies.Protective.AutoProtectiveStrategy.ProcessNewMyTrades(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.MyTrade})" />.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.Quoting.BestByPriceQuotingStrategy">
      <summary>
            Котирование по лучшей цене. Для данного котирования указывается отступ от лучшей цены <see cref="P:StockSharp.Algo.Strategies.Quoting.BestByPriceQuotingStrategy.BestPriceOffset" />,
            на который может уйти котируемая заявка.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.Quoting.QuotingStrategy">
      <summary>
            Базовая стратегия на котирование.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Quoting.QuotingStrategy.#ctor(StockSharp.Messages.Sides,System.Decimal)">
      <summary>
            Инициализировать <see cref="T:StockSharp.Algo.Strategies.Quoting.QuotingStrategy" />.
            </summary>
      <param name="quotingDirection">Направление котирования.</param>
      <param name="quotingVolume">Объем, который необходимо скотировать.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Quoting.QuotingStrategy.#ctor(StockSharp.BusinessEntities.Order)">
      <summary>
            Инициализировать <see cref="T:StockSharp.Algo.Strategies.Quoting.QuotingStrategy" />.
            </summary>
      <param name="order">Заявка, которую необходимо котировать.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Quoting.QuotingStrategy.NeedFinish">
      <summary>
            Можно ли остановить котирование.
            </summary>
      <remarks>
            По умолчанию, котирование останавливается тогда, когда все контракты реализованы и <see cref="P:StockSharp.Algo.Strategies.Quoting.QuotingStrategy.LeftVolume" /> равно 0.
            </remarks>
      <returns>True, можно, иначе, <see langword="false" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Quoting.QuotingStrategy.GetOrderPrice(Ecng.ComponentModel.Range{System.Decimal})">
      <summary>
            Получить цену для выставляемой заявки.
            </summary>
      <param name="acceptablePriceRange">Приемлемый диапазон цены.</param>
      <returns>Цена, по которой будет выставлена заявка. Если возвращается 0, то заявка выставляться не будет.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Quoting.QuotingStrategy.NeedQuoting(System.Decimal,System.Decimal,Ecng.ComponentModel.Range{System.Decimal},System.Decimal)">
      <summary>
            Нужно ли котировать заявку.
            </summary>
      <param name="currentPrice">Текущая цена.</param>
      <param name="currentVolume">Текущий объем.</param>
      <param name="acceptablePriceRange">Приемлемый диапазон цены.</param>
      <param name="newVolume">Новый объем.</param>
      <returns>Цена, по которой будет выставлена заявка. Если значение равно <see langword="null" />, то котировать не требуется.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Quoting.QuotingStrategy.GetAcceptablePriceRange">
      <summary>
            Получить приемлемый диапазон цены, попадая в который текущая заявка не будет перерегистрирована.
            </summary>
      <returns>Приемлемый диапазон цены. Если невозможно вычислить диапазон на данный момент, то будет возвращено <see langword="null" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Quoting.QuotingStrategy.GetNewVolume">
      <summary>
            Получить новый объем для заявки.
            </summary>
      <returns>Новый объем для заявки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Quoting.QuotingStrategy.GetFilteredQuotes(StockSharp.Messages.Sides)">
      <summary>
            Получить отфильтрованный с помощью <see cref="M:StockSharp.BusinessEntities.IConnector.GetFilteredMarketDepth(StockSharp.BusinessEntities.Security)" /> стакан.
            </summary>
      <param name="side">Сторона стакана (биды или оффера).</param>
      <returns>Отфильтрованный стакан.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Quoting.QuotingStrategy.GetNotificationRules">
      <summary>
            Получить список правил, на которые будет реагировать котирование.
            </summary>
      <returns>Список правил.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Quoting.QuotingStrategy.SuspendNotificationRules(System.Action)">
      <summary>
            Приостановить правила нотификации стратегии котирования и выполнить указанное действие.
            </summary>
      <param name="action">Действие.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Quoting.QuotingStrategy.OnStopped">
      <summary>
            Метод вызывается тогда, когда состояние процесса <see cref="P:StockSharp.Algo.Strategies.Strategy.ProcessState" /> перешло в значение <see cref="F:StockSharp.Algo.ProcessStates.Stopped" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Quoting.QuotingStrategy.OnStarted">
      <summary>
            Метод вызывается тогда, когда вызвался метод <see cref="M:StockSharp.Algo.Strategies.Strategy.Start" />, и состояние <see cref="P:StockSharp.Algo.Strategies.Strategy.ProcessState" /> перешло в значение <see cref="F:StockSharp.Algo.ProcessStates.Started" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Quoting.QuotingStrategy.ProcessTimeOut">
      <summary>
            Обработчик события наступления <see cref="P:StockSharp.Algo.Strategies.Quoting.QuotingStrategy.TimeOut" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Quoting.QuotingStrategy.OnStopping">
      <summary>
            Метод вызывается тогда, когда состояние процесса <see cref="P:StockSharp.Algo.Strategies.Strategy.ProcessState" /> перешло в значение <see cref="F:StockSharp.Algo.ProcessStates.Stopping" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Quoting.QuotingStrategy.NeedStop(StockSharp.BusinessEntities.OrderFail)">
      <summary>
            Нужно ли остановить котирование из-за ошибки регистрации новой заявки.
            </summary>
      <param name="fail">Описание ошибки.</param>
      <returns>
        <see langword="true" />, если нужно остановить котирование. Иначе, <see langword="false" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Quoting.QuotingStrategy.RegisterQuotingOrder(StockSharp.BusinessEntities.Order)">
      <summary>
            Зарегистрировать котируемую заявку.
            </summary>
      <param name="order">Котируемая заявка.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Quoting.QuotingStrategy.ProcessQuoting">
      <summary>
            Инициировать котирование.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Quoting.QuotingStrategy.IsSupportAtomicReRegister">
      <summary>
            Поддерживается ли перерегистрация заявок через метод <see cref="M:StockSharp.BusinessEntities.IConnector.ReRegisterOrder(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order)" />
            в виде одной транзакции. По-умолчанию включено.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Quoting.QuotingStrategy.UseLastTradePrice">
      <summary>
            Использовать цену последней сделки, если информация в стакане отсутствует.
            По-умолчанию включено.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Quoting.QuotingStrategy.QuotingDirection">
      <summary>
            Направление котирования.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Quoting.QuotingStrategy.QuotingVolume">
      <summary>
            Объем, который необходимо скотировать.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Quoting.QuotingStrategy.Order">
      <summary>
            Заявка, с которой работает в данный момент котировщик.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Quoting.QuotingStrategy.MaxReRegisterCount">
      <summary>
            Максимальное количество изменений заявки, при превышении которого алгоритм будет остановлен.
            </summary>
      <remarks>
            Значение по умолчанию равно <see cref="F:System.Int32.MaxValue" />.
            </remarks>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Quoting.QuotingStrategy.CurrentReRegisterCount">
      <summary>
            Текущее количество изменений заявки.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Quoting.QuotingStrategy.MaxRegisterFailCount">
      <summary>
            Максимальное количество ошибок регистрации заявки, при превышении которого алгоритм будет остановлен.
            </summary>
      <remarks>
            Значение по умолчанию равно 100.
            </remarks>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Quoting.QuotingStrategy.CurrentRegisterFailCount">
      <summary>
            Текущее количество ошибок регистрации заявки.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Quoting.QuotingStrategy.LeftVolume">
      <summary>
            Объем, который осталось реализовать до завершения котирования.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Quoting.QuotingStrategy.TimeOut">
      <summary>
            Ограничение по времени, в течении которого должно отработать котирование.
            Если весь объем <see cref="P:StockSharp.Algo.Strategies.Quoting.QuotingStrategy.QuotingVolume" /> не будет реализован к этому времени, то стратегия остановит свою работу.
            </summary>
      <remarks>
            По-умолчанию ограничение выключено, и равно <see cref="F:System.TimeSpan.Zero" />.
            </remarks>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Quoting.QuotingStrategy.IsTimeOut">
      <summary>
            Наступил ли <see cref="P:StockSharp.Algo.Strategies.Quoting.QuotingStrategy.TimeOut" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Quoting.QuotingStrategy.RegisterInterval">
      <summary>
            Интервал частоты ререгистрации заявки, при превышении которого новая заявка выставляться не будет.
            </summary>
      <remarks>
            По-умолчанию интервал выключен, и равен <see cref="F:System.TimeSpan.Zero" />.
            </remarks>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Quoting.QuotingStrategy.BestPrice">
      <summary>
            Получить лучшую цену. Если невозможно вычислить лучшую цену на данный момент, то будет возвращено <see langword="null" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Quoting.BestByPriceQuotingStrategy.#ctor(StockSharp.Messages.Sides,System.Decimal)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Strategies.Quoting.BestByPriceQuotingStrategy" />.
            </summary>
      <param name="quotingDirection">Направление котирования.</param>
      <param name="quotingVolume">Объем, который необходимо скотировать.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Quoting.BestByPriceQuotingStrategy.#ctor(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Strategies.Quoting.BestByPriceQuotingStrategy" />.
            </summary>
      <param name="order">Заявка, которую необходимо котировать.</param>
      <param name="bestPriceOffset">Отступ от лучшей цены, на который может уйти котируемая заявка.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Quoting.BestByPriceQuotingStrategy.GetAcceptablePriceRange">
      <summary>
            Получить приемлемый диапазон цены, попадая в который текущая заявка не будет перерегистрирована.
            </summary>
      <returns>Приемлемый диапазон цены. Если невозможно вычислить диапазон на данный момент, то будет возвращено <see langword="null" />.</returns>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Quoting.BestByPriceQuotingStrategy.BestPriceOffset">
      <summary>
            Отступ от лучшей цены, на который может уйти котируемая заявка.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.Quoting.BestByVolumeQuotingStrategy">
      <summary>
            Котирование по принципу "Лучшая по объему". Для данного котирования указывается дельта объема <see cref="P:StockSharp.Algo.Strategies.Quoting.BestByVolumeQuotingStrategy.VolumeExchange" />,
            который может стоять перед котируемой заявкой.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Quoting.BestByVolumeQuotingStrategy.#ctor(StockSharp.Messages.Sides,System.Decimal)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Strategies.Quoting.BestByVolumeQuotingStrategy" />.
            </summary>
      <param name="quotingDirection">Направление котирования.</param>
      <param name="quotingVolume">Объем, который необходимо скотировать.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Quoting.BestByVolumeQuotingStrategy.#ctor(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Strategies.Quoting.BestByVolumeQuotingStrategy" />.
            </summary>
      <param name="order">Заявка, которую необходимо котировать.</param>
      <param name="volumeExchange">Дельта объема, который может стоять перед котируемой заявкой.</param>
      <returns>Стратегия.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Quoting.BestByVolumeQuotingStrategy.NeedQuoting(System.Decimal,System.Decimal,Ecng.ComponentModel.Range{System.Decimal},System.Decimal)">
      <summary>
            Нужно ли котировать заявку.
            </summary>
      <param name="currentPrice">Текущая цена.</param>
      <param name="currentVolume">Текущий объем.</param>
      <param name="acceptablePriceRange">Приемлемый диапазон цены.</param>
      <param name="newVolume">Новый объем.</param>
      <returns>Цена, по которой будет выставлена заявка. Если значение равно <see langword="null" />, то котировать не требуется.</returns>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Quoting.BestByVolumeQuotingStrategy.VolumeExchange">
      <summary>
            Дельта объема, который может стоять перед котируемой заявкой.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.Analytics.DailyHighestVolumeStrategy">
      <summary>
            Аналитическая стратегия, расчитывающая распределение наибольшего объема по часам.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Analytics.DailyHighestVolumeStrategy.#ctor">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Strategies.Analytics.DailyHighestVolumeStrategy" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Analytics.DailyHighestVolumeStrategy.OnAnalyze">
      <summary>
            Анализировать.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Analytics.DailyHighestVolumeStrategy.TimeFrame">
      <summary>
            Тайм-фрейм.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.Derivatives.DeltaHedgeStrategy">
      <summary>
            Стратегия дельта хеджирования опционов.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.Derivatives.HedgeStrategy">
      <summary>
            Базовая стратегия хеджирования.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Derivatives.HedgeStrategy.#ctor">
      <summary>
            Инициализировать <see cref="T:StockSharp.Algo.Strategies.Derivatives.HedgeStrategy" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Derivatives.HedgeStrategy.GetNotificationRules">
      <summary>
            Получить список правил, на которые будет реагировать рехеджирование.
            </summary>
      <returns>Список правил.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Derivatives.HedgeStrategy.OnStarted">
      <summary>
            Метод вызывается тогда, когда вызвался метод <see cref="M:StockSharp.Algo.Strategies.Strategy.Start" />, и состояние <see cref="P:StockSharp.Algo.Strategies.Strategy.ProcessState" /> перешло в значение <see cref="F:StockSharp.Algo.ProcessStates.Started" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Derivatives.HedgeStrategy.GetReHedgeOrders">
      <summary>
            Получить список заявок, рехеджирующих опционную позицию.
            </summary>
      <returns>Заявки рехеджирования.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Derivatives.HedgeStrategy.AddReHedgeQuoting(StockSharp.Algo.Strategies.Strategy,StockSharp.BusinessEntities.Order)">
      <summary>
            Добавить стратегию рехеджирования.
            </summary>
      <param name="parentStrategy">Родительская стратегия (по страйку или по базовому активу).</param>
      <param name="order">Заявка рехеджирования.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Derivatives.HedgeStrategy.AddReHedgeOrder(StockSharp.Algo.Strategies.Strategy,StockSharp.BusinessEntities.Order)">
      <summary>
            Добавить заявку рехеджирования.
            </summary>
      <param name="parentStrategy">Родительская стратегия (по страйку или по базовому активу).</param>
      <param name="order">Заявка рехеджирования.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Derivatives.HedgeStrategy.ReHedge(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order})">
      <summary>
            Запустить рехеджирование.
            </summary>
      <param name="orders">Заявки рехеджирования.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Derivatives.HedgeStrategy.IsSuspended">
      <summary>
            Приостановлено ли рехеджирование.
            </summary>
      <returns>
        <see langword="true" />, если приостановлено, иначе, <see langword="false" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Derivatives.HedgeStrategy.CreateQuoting(StockSharp.BusinessEntities.Order)">
      <summary>
            Создать стратегию котирования для изменения позиции.
            </summary>
      <param name="order">Заявка, которую необходимо котировать.</param>
      <returns>Стратегия котирования.</returns>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Derivatives.HedgeStrategy.BlackScholes">
      <summary>
            Портфельная модель расчета значений "греков" по формуле Блэка-Шоулза.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Derivatives.HedgeStrategy.UseQuoting">
      <summary>
            Котировать ли выставленную заявку по рыночной цене. По-умолчанию режим выключен.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Derivatives.HedgeStrategy.PriceOffset">
      <summary>
            Отступ цены для выставляемой заявки. Определяет размер отступа от лучшей котировки (для покупки прибавляется к цене, для продажи - вычитается).
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Derivatives.DeltaHedgeStrategy.#ctor">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Strategies.Derivatives.DeltaHedgeStrategy" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Derivatives.DeltaHedgeStrategy.GetReHedgeOrders">
      <summary>
            Получить список заявок, рехеджирующих опционную позицию.
            </summary>
      <returns>Заявки рехеджирования.</returns>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Derivatives.DeltaHedgeStrategy.PositionOffset">
      <summary>
            Сдвиг в позиции по базовому активу, позволяющая не хеджировать часть опционной позиции.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.Extensions">
      <summary>
            Вспомогательный класс для работы со стратегиями.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Extensions.OpenPositionByQuoting(StockSharp.Algo.Strategies.Strategy,System.Decimal)">
      <summary>
            Открыть позицию через котирование.
            </summary>
      <param name="strategy">Стратегия.</param>
      <param name="finishPosition">Значение позиции, которое необходимо достичь. Отрицательное значение означает короткую позицию.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Extensions.ClosePositionByQuoting(StockSharp.Algo.Strategies.Strategy)">
      <summary>
            Закрыть открытую позицию через котирование.
            </summary>
      <param name="strategy">Стратегия.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Extensions.Protect(StockSharp.Algo.MarketRule{StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order},StockSharp.BusinessEntities.Unit,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать действие, защищающее заявку стратегиями <see cref="T:StockSharp.Algo.Strategies.Protective.TakeProfitStrategy" /> и <see cref="T:StockSharp.Algo.Strategies.Protective.StopLossStrategy" />.
            </summary>
      <param name="rule">Правило, ассоциированное с заявкой.</param>
      <param name="takePriceDelta">Дельта от цены защищаемой сделки, по которой должна быть выставлена защитная заявка тейк-профит.</param>
      <param name="stopPriceDelta">Дельта от цены защищаемой сделки, по которой должна быть выставлена защитная заявка стоп-лосс.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Extensions.Protect(StockSharp.Algo.MarketRule{StockSharp.BusinessEntities.Order,System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.MyTrade}},StockSharp.BusinessEntities.Unit,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать действие, защищающее сделки стратегиями <see cref="T:StockSharp.Algo.Strategies.Protective.TakeProfitStrategy" /> и <see cref="T:StockSharp.Algo.Strategies.Protective.StopLossStrategy" />.
            </summary>
      <param name="rule">Правило на появление новых сделок.</param>
      <param name="takePriceDelta">Дельта от цены защищаемой сделки, по которой должна быть выставлена защитная заявка тейк-профит.</param>
      <param name="stopPriceDelta">Дельта от цены защищаемой сделки, по которой должна быть выставлена защитная заявка стоп-лосс.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Extensions.Protect(StockSharp.Algo.MarketRule{StockSharp.BusinessEntities.Order,System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.MyTrade}},System.Func{StockSharp.BusinessEntities.MyTrade,StockSharp.Algo.Strategies.Protective.TakeProfitStrategy},System.Func{StockSharp.BusinessEntities.MyTrade,StockSharp.Algo.Strategies.Protective.StopLossStrategy})">
      <summary>
            Создать действие, защищающее сделки стратегиями <see cref="T:StockSharp.Algo.Strategies.Protective.TakeProfitStrategy" /> и <see cref="T:StockSharp.Algo.Strategies.Protective.StopLossStrategy" />.
            </summary>
      <param name="rule">Правило на появление новых сделок.</param>
      <param name="takeProfit">Функция, создающая по сделке стратегию <see cref="T:StockSharp.Algo.Strategies.Protective.TakeProfitStrategy" />.</param>
      <param name="stopLoss">Функция, создающая по сделке стратегию <see cref="T:StockSharp.Algo.Strategies.Protective.StopLossStrategy" />.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Extensions.EmulateOrders(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order},StockSharp.Algo.Storages.IStorageRegistry,System.Collections.Generic.IDictionary{StockSharp.BusinessEntities.Security,System.Decimal})">
      <summary>
            Сэмулировать заявки на истории.
            </summary>
      <param name="orders">Заявки, которые необходимо сэмулировать на истории.</param>
      <param name="storageRegistry">Внешнеее хранилище для доступа к исторических данным.</param>
      <param name="openedPositions">Сделки, описывающие начальные открытые позиции.</param>
      <returns>Виртуальная стратегии, содержащая в себе ход эмуляционных торгов.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Extensions.WhenNewMyTrades(StockSharp.Algo.Strategies.Strategy)">
      <summary>
            Создать правило на событие появление новых сделок стратегии.
            </summary>
      <param name="strategy">Стратегия, по которой будет отслеживаться появление сделок.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Extensions.WhenOrderRegistered(StockSharp.Algo.Strategies.Strategy)">
      <summary>
            Создать правило на событие появление новой заявки стратегии.
            </summary>
      <param name="strategy">Стратегия, по которой будет отслеживаться появление заявки.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Extensions.WhenOrderChanged(StockSharp.Algo.Strategies.Strategy)">
      <summary>
            Создать правило на событие изменения любой заявки стратегии.
            </summary>
      <param name="strategy">Стратегия, по которой будет отслеживаться изменение заявок.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Extensions.WhenPositionChanged(StockSharp.Algo.Strategies.Strategy)">
      <summary>
            Создать правило на событие изменения позиции у стратегии.
            </summary>
      <param name="strategy">Стратегия, по которой будет отслеживаться изменение позиции.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Extensions.WhenPositionLess(StockSharp.Algo.Strategies.Strategy,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать правило на событие уменьшения позиции у стратегии ниже определённого уровня.
            </summary>
      <param name="strategy">Стратегия, по которой будет отслеживаться изменение позиции.</param>
      <param name="value">Уровень. Если тип <see cref="P:StockSharp.BusinessEntities.Unit.Type" /> равен <see cref="F:StockSharp.BusinessEntities.UnitTypes.Limit" />, то задается конкретная цена. Иначе, указывается величина сдвига.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Extensions.WhenPositionMore(StockSharp.Algo.Strategies.Strategy,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать правило на событие увеличения позиции у стратегии выше определенного уровня.
            </summary>
      <param name="strategy">Стратегия, по которой будет отслеживаться изменение позиции.</param>
      <param name="value">Уровень. Если тип <see cref="P:StockSharp.BusinessEntities.Unit.Type" /> равен <see cref="F:StockSharp.BusinessEntities.UnitTypes.Limit" />, то задается конкретная цена. Иначе, указывается величина сдвига.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Extensions.WhenPnLLess(StockSharp.Algo.Strategies.Strategy,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать правило на событие уменьшения прибыли ниже определённого уровня.
            </summary>
      <param name="strategy">Стратегия, по которой будет отслеживаться изменение прибыли.</param>
      <param name="value">Уровень. Если тип <see cref="P:StockSharp.BusinessEntities.Unit.Type" /> равен <see cref="F:StockSharp.BusinessEntities.UnitTypes.Limit" />, то задается конкретная цена. Иначе, указывается величина сдвига.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Extensions.WhenPnLMore(StockSharp.Algo.Strategies.Strategy,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать правило на событие увеличения прибыли выше определенного уровня.
            </summary>
      <param name="strategy">Стратегия, по которой будет отслеживаться изменение прибыли.</param>
      <param name="value">Уровень. Если тип <see cref="P:StockSharp.BusinessEntities.Unit.Type" /> равен <see cref="F:StockSharp.BusinessEntities.UnitTypes.Limit" />, то задается конкретная цена. Иначе, указывается величина сдвига.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Extensions.WhenPnLChanged(StockSharp.Algo.Strategies.Strategy)">
      <summary>
            Создать правило на событие изменения прибыли.
            </summary>
      <param name="strategy">Стратегия, по которой будет отслеживаться изменение прибыли.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Extensions.WhenStarted(StockSharp.Algo.Strategies.Strategy)">
      <summary>
            Создать правило на событие начала работы стратегии.
            </summary>
      <param name="strategy">Стратегия, по которой будет ожидаться начало работы стратегии.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Extensions.WhenStopping(StockSharp.Algo.Strategies.Strategy)">
      <summary>
            Создать правило на событие начала остановки работы стратегии.
            </summary>
      <param name="strategy">Стратегия, по которой будет ожидаться начало остановки.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Extensions.WhenStopped(StockSharp.Algo.Strategies.Strategy)">
      <summary>
            Создать правило на событие полной остановки работы стратегии.
            </summary>
      <param name="strategy">Стратегия, по которой будет ожидаться полная остановка.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Extensions.WhenError(StockSharp.Algo.Strategies.Strategy)">
      <summary>
            Создать правило на событие ошибки стратегии (переход состояния <see cref="P:StockSharp.Algo.Strategies.Strategy.ErrorState" /> в <see cref="F:StockSharp.Logging.LogLevels.Error" />).
            </summary>
      <param name="strategy">Стратегия, по которой будет ожидаться ошибка.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Extensions.WhenWarning(StockSharp.Algo.Strategies.Strategy)">
      <summary>
            Создать правило на событие предупреждения стратегии (переход состояния <see cref="P:StockSharp.Algo.Strategies.Strategy.ErrorState" /> в <see cref="F:StockSharp.Logging.LogLevels.Warning" />).
            </summary>
      <param name="strategy">Стратегия, по которой будет ожидаться предупреждение.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Extensions.Register(StockSharp.Algo.IMarketRule,StockSharp.BusinessEntities.Order)">
      <summary>
            Создать действие, регистрирующее заявку.
            </summary>
      <param name="rule">Правило.</param>
      <param name="order">Заявка, которую необходимо зарегистрировать.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Extensions.ReRegister(StockSharp.Algo.IMarketRule,StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order)">
      <summary>
            Создать действие, перерегистрирующее заявку.
            </summary>
      <param name="rule">Правило.</param>
      <param name="oldOrder">Заявка, которую необходимо перезарегистрировать.</param>
      <param name="newOrder">Информация о новой заявке.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Extensions.Cancel(StockSharp.Algo.IMarketRule,StockSharp.BusinessEntities.Order)">
      <summary>
            Создать действие, отменяющее заявку.
            </summary>
      <param name="rule">Правило.</param>
      <param name="order">Заявка, которую необходимо отменить.</param>
      <returns>Правило.</returns>
    </member>
    <member name="T:StockSharp.Algo.Strategies.Protective.IProtectiveStrategy">
      <summary>
            Интерейс защитной стратегии.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Protective.IProtectiveStrategy.ProtectiveVolume">
      <summary>
            Защищаемый объем.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Protective.IProtectiveStrategy.ProtectivePrice">
      <summary>
            Цена защищаемой позиции.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Protective.IProtectiveStrategy.ProtectiveSide">
      <summary>
            Направление защищаемой позиции.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Protective.IProtectiveStrategy.ProtectiveVolumeChanged">
      <summary>
            Событие об изменении защищаемого объема.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.Quoting.LastTradeQuotingStrategy">
      <summary>
            Котирование по цене последней сделки.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Quoting.LastTradeQuotingStrategy.#ctor(StockSharp.Messages.Sides,System.Decimal)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Strategies.Quoting.LastTradeQuotingStrategy" />.
            </summary>
      <param name="quotingDirection">Направление котирования.</param>
      <param name="quotingVolume">Объем, который необходимо скотировать.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Quoting.LastTradeQuotingStrategy.#ctor(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Strategies.Quoting.LastTradeQuotingStrategy" />.
            </summary>
      <param name="order">Заявка, которую необходимо котировать.</param>
      <param name="bestPriceOffset">Отступ от лучшей цены, на которую может уйти котируемая заявка.</param>
      <returns>Стратегия.</returns>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Quoting.LastTradeQuotingStrategy.BestPrice">
      <summary>
            Получить лучшую цену. Если невозможно вычислить лучшую цену на данный момент, то будет возвращено <see langword="null" />.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.Quoting.LevelQuotingStrategy">
      <summary>
            Котирование по заданному уровню в стакане.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Quoting.LevelQuotingStrategy.#ctor(StockSharp.Messages.Sides,System.Decimal)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Strategies.Quoting.LevelQuotingStrategy" />.
            </summary>
      <param name="quotingDirection">Направление котирования.</param>
      <param name="quotingVolume">Объем, который необходимо скотировать.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Quoting.LevelQuotingStrategy.GetAcceptablePriceRange">
      <summary>
            Получить приемлемый диапазон цены, попадая в который текущая заявка не будет перерегистрирована.
            </summary>
      <returns>Приемлемый диапазон цены. Если невозможно вычислить диапазон на данный момент, то будет возвращено <see langword="null" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Quoting.LevelQuotingStrategy.GetOrderPrice(Ecng.ComponentModel.Range{System.Decimal})">
      <summary>
            Получить цену для выставляемой заявки.
            </summary>
      <param name="acceptablePriceRange">Приемлемый диапазон цены.</param>
      <returns>Цена, по которой будет выставлена заявка. Если возвращается 0, то заявка выставляться не будет.</returns>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Quoting.LevelQuotingStrategy.Level">
      <summary>
            Уровень в стакане. Определяет количество котировок вглубь стакана от лучшей. По-умолчанию равно 0, что означает котирование по лучшей котировке.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Quoting.LevelQuotingStrategy.OwnLevel">
      <summary>
            Создавать свой собственный ценовой уровень в стакане, если котировки с необходимой ценой еще нет. По-умолчанию выключено.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.Quoting.LimitQuotingStrategy">
      <summary>
            Стратерия, реализующая алгоритм котирования объема по лимитированной цене.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Quoting.LimitQuotingStrategy.#ctor(StockSharp.Messages.Sides,System.Decimal,System.Decimal)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Strategies.Quoting.LimitQuotingStrategy" />.
            </summary>
      <param name="quotingDirection">Направление котирования.</param>
      <param name="quotingVolume">Объем, который необходимо скотировать.</param>
      <param name="limitPrice">Лимитированная цена для котируемых заявок.</param>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Quoting.LimitQuotingStrategy.LimitPrice">
      <summary>
            Лимитированная цена для котируемых заявок.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Quoting.LimitQuotingStrategy.BestPrice">
      <summary>
            Получить лучшую цену. Если невозможно вычислить лучшую цену на данный момент, то будет возвращено <see langword="null" />.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.Quoting.MarketQuotingStrategy">
      <summary>
            Котирование по рыночной цене.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Quoting.MarketQuotingStrategy.#ctor(StockSharp.Messages.Sides,System.Decimal)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Strategies.Quoting.MarketQuotingStrategy" />.
            </summary>
      <param name="quotingDirection">Направление котирования.</param>
      <param name="quotingVolume">Объем, который необходимо скотировать.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Quoting.MarketQuotingStrategy.#ctor(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Unit,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Strategies.Quoting.MarketQuotingStrategy" />.
            </summary>
      <param name="order">Заявка, которую необходимо котировать.</param>
      <param name="bestPriceOffset">Отступ от лучшей цены, на которую может уйти котируемая заявка.</param>
      <param name="priceOffset">Отступ цены для выставляемой заявки. Определяет размер отступа от лучшей котировки (для покупки прибавляется к цене, для продажи - вычитается).</param>
      <returns>Стратегия.</returns>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Quoting.MarketQuotingStrategy.PriceType">
      <summary>
            Тип рыночной цены. По умолчанию равен <see cref="F:StockSharp.Algo.MarketPriceTypes.Following" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Quoting.MarketQuotingStrategy.PriceOffset">
      <summary>
            Отступ цены для выставляемой заявки. Определяет размер отступа от лучшей котировки (для покупки прибавляется к цене, для продажи - вычитается).
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Quoting.MarketQuotingStrategy.BestPrice">
      <summary>
            Получить лучшую цену. Если невозможно вычислить лучшую цену на данный момент, то будет возвращено <see langword="null" />.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.Analytics.PriceVolumeDistributionStrategy">
      <summary>
            Аналитическая стратегия, расчитывающая распределение объема по ценовым уровням.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Analytics.PriceVolumeDistributionStrategy.#ctor">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Strategies.Analytics.PriceVolumeDistributionStrategy" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Analytics.PriceVolumeDistributionStrategy.OnAnalyze">
      <summary>
            Анализировать.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Analytics.PriceVolumeDistributionStrategy.TimeFrame">
      <summary>
            Тайм-фрейм.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.Protective.ProtectiveStrategy">
      <summary>
            Базовая стратегия защиты позиции.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Protective.ProtectiveStrategy.#ctor(StockSharp.Messages.Sides,System.Decimal,System.Decimal,StockSharp.BusinessEntities.Unit)">
      <summary>
            Инициализировать <see cref="T:StockSharp.Algo.Strategies.Protective.ProtectiveStrategy" />.
            </summary>
      <param name="protectiveSide">Направление защищаемой позиции.</param>
      <param name="protectivePrice">Цена защищаемой позиции.</param>
      <param name="protectiveVolume">Объем защищаемой позиции.</param>
      <param name="protectiveLevel">
            Защитный уровень. Если тип <see cref="P:StockSharp.BusinessEntities.Unit.Type" /> равен <see cref="F:StockSharp.BusinessEntities.UnitTypes.Limit" />,
            то задается конкретная цена. Иначе, указывается величина сдвига от <paramref name="protectivePrice" />.
            </param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Protective.ProtectiveStrategy.GetNotificationRules">
      <summary>
            Получить список правил, на которые будет реагировать котирование.
            </summary>
      <returns>Список правил.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Protective.ProtectiveStrategy.OnStarted">
      <summary>
            Метод вызывается тогда, когда вызвался метод <see cref="M:StockSharp.Algo.Strategies.Strategy.Start" />, и состояние <see cref="P:StockSharp.Algo.Strategies.Strategy.ProcessState" /> перешло в значение <see cref="F:StockSharp.Algo.ProcessStates.Started" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Protective.ProtectiveStrategy.OnStopping">
      <summary>
            Метод вызывается тогда, когда состояние процесса <see cref="P:StockSharp.Algo.Strategies.Strategy.ProcessState" /> перешло в значение <see cref="F:StockSharp.Algo.ProcessStates.Stopping" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Protective.ProtectiveStrategy.ProcessTimeOut">
      <summary>
            Обработчик события наступления <see cref="P:StockSharp.Algo.Strategies.Quoting.QuotingStrategy.TimeOut" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Protective.ProtectiveStrategy.NeedQuoting(System.Decimal,System.Decimal,Ecng.ComponentModel.Range{System.Decimal},System.Decimal)">
      <summary>
            Нужно ли котировать заявку.
            </summary>
      <param name="currentPrice">Текущая цена.</param>
      <param name="currentVolume">Текущий объем.</param>
      <param name="acceptablePriceRange">Приемлемый диапазон цены.</param>
      <param name="newVolume">Новый объем.</param>
      <returns>Цена, по которой будет выставлена заявка. Если значение равно <see langword="null" />, то котировать не требуется.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Protective.ProtectiveStrategy.ProcessQuoting">
      <summary>
            Инициировать котирование.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Protective.ProtectiveStrategy.CreateQuoting">
      <summary>
            Создать стратегию котирования для защитной заявки (гарантированно исполнить ее).
            </summary>
      <returns>Стратегия котирования.</returns>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Protective.ProtectiveStrategy.ProtectivePrice">
      <summary>
            Цена защищаемой позиции.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Protective.ProtectiveStrategy.ProtectiveSide">
      <summary>
            Направление защищаемой позиции.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Protective.ProtectiveStrategy.ProtectiveVolume">
      <summary>
            Защищаемый объем.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Protective.ProtectiveStrategy.ProtectiveVolumeChanged">
      <summary>
            Событие об изменении защищаемого объема.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Protective.ProtectiveStrategy.ProtectiveLevel">
      <summary>
            Защитный уровень. Если тип <see cref="P:StockSharp.BusinessEntities.Unit.Type" /> равен <see cref="F:StockSharp.BusinessEntities.UnitTypes.Limit" />,
            то задается конкретная цена. Иначе, указывается величина сдвига от защищаемой сделки <see cref="T:StockSharp.BusinessEntities.Trade" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Protective.ProtectiveStrategy.IsTrailing">
      <summary>
            Использовать ли механизм скольжения.
            Для <see cref="T:StockSharp.Algo.Strategies.Protective.TakeProfitStrategy" /> при увеличении прибыли автоматически увеличивается уровень взятия прибыли.
            Для <see cref="T:StockSharp.Algo.Strategies.Protective.StopLossStrategy" /> при увеличении прибыли автоматически увеличивается уровень защиты убытка.
            По-умолчанию выключено.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Protective.ProtectiveStrategy.ActivationPrice">
      <summary>
            Абсолютное значение цены, при достижении которой автивизируется защитная стратегия. Если цена равна <see langword="null" />, то активация не требуется.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Protective.ProtectiveStrategy.IsActivated">
      <summary>
            Активирована ли защитная стратегия.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Protective.ProtectiveStrategy.Activated">
      <summary>
            Событие активации защитной стратегии.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Protective.ProtectiveStrategy.UseQuoting">
      <summary>
            Котировать ли выставленную заявку по рыночной цене. По-умолчанию режим выключен.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Protective.ProtectiveStrategy.UseMarketOrders">
      <summary>
            Использоваить ли <see cref="F:StockSharp.Messages.OrderTypes.Market" /> при защите. По-умолчанию используются заявки <see cref="F:StockSharp.Messages.OrderTypes.Limit" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Protective.ProtectiveStrategy.BestPriceOffset">
      <summary>
            Отступ от лучшей цены, на которую может уйти котируемая заявка.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Protective.ProtectiveStrategy.PriceOffset">
      <summary>
            Отступ цены для выставляемой заявки. Определяет размер отступа от лучшей котировки (для покупки прибавляется к цене, для продажи - вычитается).
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Protective.ProtectiveStrategy.QuotingVolume">
      <summary>
            Объем, который необходимо скотировать.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Protective.ProtectiveStrategy.ClosePositionPrice">
      <summary>
            Рыночная цена закрытия позиции. Если нет информации о текущей цене, то будет возвращено <see langword="null" />.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.Protective.StopLossStrategy">
      <summary>
            Стратегия защиты убытка.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Protective.StopLossStrategy.#ctor(StockSharp.BusinessEntities.MyTrade,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать стратегию <see cref="T:StockSharp.Algo.Strategies.Protective.StopLossStrategy" />.
            </summary>
      <param name="trade">Защищаемая позиция.</param>
      <param name="protectiveLevel">
            Защитный уровень. Если тип <see cref="P:StockSharp.BusinessEntities.Unit.Type" /> равен <see cref="F:StockSharp.BusinessEntities.UnitTypes.Limit" />,
            то задается конкретная цена. Иначе, указывается величина сдвига от защищаемой сделки <paramref name="trade" />.
            </param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Protective.StopLossStrategy.#ctor(StockSharp.Messages.Sides,System.Decimal,System.Decimal,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать стратегию <see cref="T:StockSharp.Algo.Strategies.Protective.StopLossStrategy" />.
            </summary>
      <param name="protectiveSide">Направление защищаемой позиции.</param>
      <param name="protectivePrice">Цена защищаемой позиции.</param>
      <param name="protectiveVolume">Объем защищаемой позиции.</param>
      <param name="protectiveLevel">
            Защитный уровень. Если тип <see cref="P:StockSharp.BusinessEntities.Unit.Type" /> равен <see cref="F:StockSharp.BusinessEntities.UnitTypes.Limit" />,
            то задается конкретная цена. Иначе, указывается величина сдвига от <paramref name="protectivePrice" />.
            </param>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Protective.StopLossStrategy.ActivationOffset">
      <summary>
            Защитный сдвиг от расcчитанной цены стопа <see cref="P:StockSharp.Algo.Strategies.Protective.StopLossStrategy.ActivationPrice" />, который позволяет активировать защиту до достижения рынком данной цены.
            По-умолчанию выключено.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Protective.StopLossStrategy.ActivationPrice">
      <summary>
            Абсолютное значение цены, при достижении которой автивизируется защитная стратегия. Если цена равна <see langword="null" />, то активация не требуется.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.Protective.TakeProfitStopLossStrategy">
      <summary>
            Стратегия, защищающая сделки одновременно стратегиями <see cref="T:StockSharp.Algo.Strategies.Protective.TakeProfitStrategy" /> и <see cref="T:StockSharp.Algo.Strategies.Protective.StopLossStrategy" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Protective.TakeProfitStopLossStrategy.#ctor(StockSharp.Algo.Strategies.Protective.TakeProfitStrategy,StockSharp.Algo.Strategies.Protective.StopLossStrategy)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Strategies.Protective.TakeProfitStopLossStrategy" /></summary>
      <param name="takeProfit">Стратегия защиты прибыли.</param>
      <param name="stopLoss">Стратегия защиты убытка.</param>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Protective.TakeProfitStopLossStrategy.ProtectiveVolume">
      <summary>
            Защищаемый объем.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Protective.TakeProfitStopLossStrategy.ProtectivePrice">
      <summary>
            Цена защищаемой позиции.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Protective.TakeProfitStopLossStrategy.ProtectiveSide">
      <summary>
            Направление защищаемой позиции.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Protective.TakeProfitStopLossStrategy.ProtectiveVolumeChanged">
      <summary>
            Событие об изменении защищаемого объема.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.Protective.TakeProfitStrategy">
      <summary>
            Стратегия защиты прибыли.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Protective.TakeProfitStrategy.#ctor(StockSharp.BusinessEntities.MyTrade,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать стратегию <see cref="T:StockSharp.Algo.Strategies.Protective.TakeProfitStrategy" />.
            </summary>
      <param name="trade">Защищаемая позиция.</param>
      <param name="protectiveLevel">
            Защитный уровень. Если тип <see cref="P:StockSharp.BusinessEntities.Unit.Type" /> равен <see cref="F:StockSharp.BusinessEntities.UnitTypes.Limit" />,
            то задается конкретная цена. Иначе, указывается величина сдвига от защищаемой сделки <paramref name="trade" />.
            </param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Protective.TakeProfitStrategy.#ctor(StockSharp.Messages.Sides,System.Decimal,System.Decimal,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать стратегию <see cref="T:StockSharp.Algo.Strategies.Protective.TakeProfitStrategy" />.
            </summary>
      <param name="protectiveSide">Направление защищаемой позиции.</param>
      <param name="protectivePrice">Цена защищаемой позиции.</param>
      <param name="protectiveVolume">Объем защищаемой позиции.</param>
      <param name="protectiveLevel">
            Защитный уровень. Если тип <see cref="P:StockSharp.BusinessEntities.Unit.Type" /> равен <see cref="F:StockSharp.BusinessEntities.UnitTypes.Limit" />,
            то задается конкретная цена. Иначе, указывается величина сдвига от <paramref name="protectivePrice" />.
            </param>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Protective.TakeProfitStrategy.ActivationPrice">
      <summary>
            Абсолютное значение цены, при достижении которой автивизируется защитная стратегия. Если цена равна <see langword="null" />, то активация не требуется.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.Derivatives.TheorPriceQuotingStrategy">
      <summary>
            Котирование опционов по теоретической цене.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Derivatives.TheorPriceQuotingStrategy.#ctor(StockSharp.Messages.Sides,System.Decimal,Ecng.ComponentModel.Range{StockSharp.BusinessEntities.Unit})">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Strategies.Derivatives.TheorPriceQuotingStrategy" />.
            </summary>
      <param name="quotingDirection">Направление котирования.</param>
      <param name="quotingVolume">Объем, который необходимо скотировать.</param>
      <param name="theorPriceOffset">Отклонение от теоретической цены.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Derivatives.TheorPriceQuotingStrategy.GetAcceptablePriceRange">
      <summary>
            Получить приемлемый диапазон цены, попадая в который текущая заявка не будет перерегистрирована.
            </summary>
      <returns>Приемлемый диапазон цены. Если невозможно вычислить диапазон на данный момент, то будет возвращено null.</returns>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Derivatives.TheorPriceQuotingStrategy.TheorPriceOffset">
      <summary>
            Отклонение от теоретической цены.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.Reporting.CsvStrategyReport">
      <summary>
             Генератор отчета по эквити стратегии в формате csv.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.Reporting.StrategyReport">
      <summary>
            Базовый генератор отчета для стратегии.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Reporting.StrategyReport.#ctor(System.Collections.Generic.IEnumerable{StockSharp.Algo.Strategies.Strategy},System.String)">
      <summary>
            Инициализировать <see cref="T:StockSharp.Algo.Strategies.Reporting.StrategyReport" />.
            </summary>
      <param name="strategies">Стратегии, для которых необходимо сгенерировать отчет.</param>
      <param name="fileName">Название файла, в котором сгенерируется отчет.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Reporting.StrategyReport.Generate">
      <summary>
            Сгенерировать отчет.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Reporting.StrategyReport.Format(System.Nullable{System.TimeSpan})">
      <summary>
            Отформатировать время в строку.
            </summary>
      <param name="time">Время.</param>
      <returns>Отформатированная строка.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Reporting.StrategyReport.Format(System.DateTime)">
      <summary>
            Отформатировать время в строку.
            </summary>
      <param name="time">Время.</param>
      <returns>Отформатированная строка.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Reporting.StrategyReport.Format(StockSharp.Messages.Sides)">
      <summary>
            Отформатировать направление заявки в строку.
            </summary>
      <param name="direction">Направление заявки.</param>
      <returns>Отформатированная строка.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Reporting.StrategyReport.Format(StockSharp.Messages.OrderStates)">
      <summary>
            Отформатировать состояние заявки в строку.
            </summary>
      <param name="state">Состояние заявки.</param>
      <returns>Отформатированная строка.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Reporting.StrategyReport.Format(StockSharp.Messages.OrderTypes)">
      <summary>
            Отформатировать тип заявки в строку.
            </summary>
      <param name="type">Тип заявки.</param>
      <returns>Отформатированная строка.</returns>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Reporting.StrategyReport.FileName">
      <summary>
            Название файла, в котором сгенерируется отчет.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Reporting.StrategyReport.Strategies">
      <summary>
            Стратегии, для которых необходимо сгенерировать отчет.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Reporting.CsvStrategyReport.#ctor(StockSharp.Algo.Strategies.Strategy,System.String)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Strategies.Reporting.CsvStrategyReport" />.
            </summary>
      <param name="strategy">Стратегия, для которой необходимо сгенерировать отчет.</param>
      <param name="fileName">Название файла, в котором сгенерируется отчет в формате csv.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Reporting.CsvStrategyReport.#ctor(System.Collections.Generic.IEnumerable{StockSharp.Algo.Strategies.Strategy},System.String)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Strategies.Reporting.CsvStrategyReport" />.
            </summary>
      <param name="strategies">Стратегии, для которых необходимо сгенерировать отчет.</param>
      <param name="fileName">Название файла, в котором сгенерируется отчет в формате csv.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Reporting.CsvStrategyReport.Generate">
      <summary>
            Сгенерировать отчет.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.Reporting.ExcelStrategyReport">
      <summary>
            Генератор отчета для стратегии в формате Excel.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Reporting.ExcelStrategyReport.#ctor(StockSharp.Algo.Strategies.Strategy,System.String)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Strategies.Reporting.ExcelStrategyReport" />.
            </summary>
      <param name="strategy">Стратегия, для которой необходимо сгенерировать отчет.</param>
      <param name="fileName">Название файла, в котором сгенерируется отчет в формате Excel.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Reporting.ExcelStrategyReport.#ctor(System.Collections.Generic.IEnumerable{StockSharp.Algo.Strategies.Strategy},System.String)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Strategies.Reporting.ExcelStrategyReport" />.
            </summary>
      <param name="strategies">Стратегии, для которых необходимо сгенерировать отчет.</param>
      <param name="fileName">Название файла, в котором сгенерируется отчет в формате Excel.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Reporting.ExcelStrategyReport.#ctor(System.Collections.Generic.IEnumerable{StockSharp.Algo.Strategies.Strategy},System.String,System.String)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Strategies.Reporting.ExcelStrategyReport" />.
            </summary>
      <param name="strategies">Стратегии, для которых необходимо сгенерировать отчет.</param>
      <param name="fileName">Название файла, в котором сгенерируется отчет в формате Excel.</param>
      <param name="template">Файл-шаблон, который будет скопирован в <see cref="P:StockSharp.Algo.Strategies.Reporting.StrategyReport.FileName" />.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Reporting.ExcelStrategyReport.Generate">
      <summary>
            Сгенерировать отчет.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Reporting.ExcelStrategyReport.Template">
      <summary>
            Файл-шаблон, который будет скопирован в <see cref="P:StockSharp.Algo.Strategies.Reporting.StrategyReport.FileName" /> и дозаполнен листами Strategy, Orders и Trades.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Reporting.ExcelStrategyReport.ExcelVersion">
      <summary>
            Версия Excel-я. Влияет на максимальное количество строчек. По-умолчанию установлено значение 2007.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Reporting.ExcelStrategyReport.IncludeOrders">
      <summary>
            Добавлять в отчет заявки. По-умолчанию заявки добавляются.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Reporting.ExcelStrategyReport.Decimals">
      <summary>
            Количество знаков после запятой. По-умолчанию равно 2.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.Reporting.XmlStrategyReport">
      <summary>
            Генератор отчета для стратегии в формате xml.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Reporting.XmlStrategyReport.#ctor(StockSharp.Algo.Strategies.Strategy,System.String)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Strategies.Reporting.XmlStrategyReport" />.
            </summary>
      <param name="strategy">Стратегия, для которой необходимо сгенерировать отчет.</param>
      <param name="fileName">Название файла, в котором сгенерируется отчет в формате Xml.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Reporting.XmlStrategyReport.#ctor(System.Collections.Generic.IEnumerable{StockSharp.Algo.Strategies.Strategy},System.String)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Strategies.Reporting.XmlStrategyReport" />.
            </summary>
      <param name="strategies">Стратегии, для которых необходимо сгенерировать отчет.</param>
      <param name="fileName">Название файла, в котором сгенерируется отчет в формате xml.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Reporting.XmlStrategyReport.Generate">
      <summary>
            Сгенерировать отчет.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.StrategyHelper">
      <summary>
            Вспомогательный класс для работы с классом <see cref="T:StockSharp.Algo.Strategies.Strategy" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyHelper.BuyAtMarket(StockSharp.Algo.Strategies.Strategy,System.Decimal)">
      <summary>
            Создать инициализированный объект заявки на покупку по рыночной цене.
            </summary>
      <remarks>
            Заявка не регистрируется, а только создается объект.
            </remarks>
      <param name="strategy">Стратегия.</param>
      <param name="volume">Объем. Если передается значение 0, то используется значение <see cref="P:StockSharp.Algo.Strategies.Strategy.Volume" />.</param>
      <returns>Инициализированный объект заявки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyHelper.SellAtMarket(StockSharp.Algo.Strategies.Strategy,System.Decimal)">
      <summary>
            Создать инициализированный объект заявки на продажу по рыночной цене.
            </summary>
      <remarks>
            Заявка не регистрируется, а только создается объект.
            </remarks>
      <param name="strategy">Стратегия.</param>
      <param name="volume">Объем. Если передается значение 0, то используется значение <see cref="P:StockSharp.Algo.Strategies.Strategy.Volume" />.</param>
      <returns>Инициализированный объект заявки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyHelper.BuyAtLimit(StockSharp.Algo.Strategies.Strategy,System.Decimal,System.Decimal)">
      <summary>
            Создать инициализированный объект заявки на покупку.
            </summary>
      <remarks>
            Заявка не регистрируется, а только создается объект.
            </remarks>
      <param name="strategy">Стратегия.</param>
      <param name="price">Цена.</param>
      <param name="volume">Объем. Если передается значение 0, то используется значение <see cref="P:StockSharp.Algo.Strategies.Strategy.Volume" />.</param>
      <returns>Инициализированный объект заявки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyHelper.SellAtLimit(StockSharp.Algo.Strategies.Strategy,System.Decimal,System.Decimal)">
      <summary>
            Создать инициализированный объект заявки на продажу.
            </summary>
      <remarks>
            Заявка не регистрируется, а только создается объект.
            </remarks>
      <param name="strategy">Стратегия.</param>
      <param name="price">Цена.</param>
      <param name="volume">Объем. Если передается значение 0, то используется значение <see cref="P:StockSharp.Algo.Strategies.Strategy.Volume" />.</param>
      <returns>Инициализированный объект заявки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyHelper.CreateOrder(StockSharp.Algo.Strategies.Strategy,StockSharp.Messages.Sides,System.Decimal,System.Decimal)">
      <summary>
            Создать инициализированный объект заявки.
            </summary>
      <remarks>
            Заявка не регистрируется, а только создается объект.
            </remarks>
      <param name="strategy">Стратегия.</param>
      <param name="direction">Направление заявки.</param>
      <param name="price">Цена. Если передается значение 0, то выставляется заявка по рыночной цене.</param>
      <param name="volume">Объем. Если передается значение 0, то используется значение <see cref="P:StockSharp.Algo.Strategies.Strategy.Volume" />.</param>
      <returns>Инициализированный объект заявки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyHelper.ClosePosition(StockSharp.Algo.Strategies.Strategy,System.Decimal)">
      <summary>
            Закрыть открытую позицию по рынку (выставить заявку типа <see cref="F:StockSharp.Messages.OrderTypes.Market" />).
            </summary>
      <remarks>
            Рыночная заявка не работает на всех биржах.
            </remarks>
      <param name="strategy">Стратегия.</param>
      <param name="slippage">Уровень проскальзывания, допустимый при регистрации заявки. Используется, если заявка регистрируется лимиткой.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyHelper.GetCandleManager(StockSharp.Algo.Strategies.Strategy)">
      <summary>
            Получить менеджер свечек, ассоциированный с переданной стратегией.
            </summary>
      <param name="strategy">Стратегия.</param>
      <returns>Менеджер свечек.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyHelper.SetCandleManager(StockSharp.Algo.Strategies.Strategy,StockSharp.Algo.Candles.ICandleManager)">
      <summary>
            Установить менеджер свечек для стратегии.
            </summary>
      <param name="strategy">Стратегия.</param>
      <param name="candleManager">Менеджер свечек.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyHelper.GetIsEmulation(StockSharp.Algo.Strategies.Strategy)">
      <summary>
            Получить режим запуска стратегии (эмуляция или реал).
            </summary>
      <param name="strategy">Стратегия.</param>
      <returns>Если используется режим эмуляции - true, иначе - false.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyHelper.SetIsEmulation(StockSharp.Algo.Strategies.Strategy,System.Boolean)">
      <summary>
            Установить режим запуска стратегии (эмуляция или реал).
            </summary>
      <param name="strategy">Стратегия.</param>
      <param name="isEmulation">Если используется режим эмуляции - true, иначе - false.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyHelper.GetIsInitialization(StockSharp.Algo.Strategies.Strategy)">
      <summary>
            Получить режим работы стратегии (инициализация или торговля).
            </summary>
      <param name="strategy">Стратегия.</param>
      <returns>Если выполняется инициализация - true, иначе - false.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyHelper.SetIsInitialization(StockSharp.Algo.Strategies.Strategy,System.Boolean)">
      <summary>
            Установить режим работы стратегии (инициализация или торговля).
            </summary>
      <param name="strategy">Стратегия.</param>
      <param name="isInitialization">Если выполняется инициализация - true, иначе - false.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyHelper.LoadState(StockSharp.Algo.Strategies.Strategy,Ecng.Serialization.SettingsStorage)">
      <summary>
            Восстановить состояние стратегии.
            </summary>
      <remarks>
            Данный метод используется для загрузки статистики, заявок и сделок.
            
            Хранилище данных должно содержать следующие параметры:
            1. Settings (SettingsStorage) - настройки стратегии.
            2. Statistics(SettingsStorage) - сохраненное состояние статистики.
            3. Orders (IDictionary[Order, IEnumerable[MyTrade]]) - заявки и сделки по ним.
            4. Positions (IEnumerable[Position]) - позиции стратегии.
            
            При отсутствии одного из параметров соответствующие данные восстанавливаться не будут.
            </remarks>
      <param name="strategy">Стратегия.</param>
      <param name="storage">Хранилище данных.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyHelper.GetSecurityValue``1(StockSharp.Algo.Strategies.Strategy,StockSharp.Messages.Level1Fields)">
      <summary>
            Получить значение маркет-данных для инструмента стратегии.
            </summary>
      <typeparam name="T">Тип значения поля маркет-данных.</typeparam>
      <param name="strategy">Стратегия.</param>
      <param name="field">Поле маркет-данных.</param>
      <returns>Значение поля. Если данных нет, то будет возвращено <see langword="null" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyHelper.GetMarketPrice(StockSharp.Algo.Strategies.Strategy,StockSharp.Messages.Sides)">
      <summary>
            Получить рыночную цену для инструмента по максимально и минимально возможным ценам.
            </summary>
      <param name="strategy">Стратегия.</param>
      <param name="side">Направление заявки.</param>
      <returns>Рыночная цена. Если нет информации о максимально и минимально возможных ценах, то будет возвращено <see langword="null" />.</returns>
    </member>
    <member name="T:StockSharp.Algo.Strategies.StrategyNameGenerator">
      <summary>
            Класс для формирования имени стратегии.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyNameGenerator.#ctor(StockSharp.Algo.Strategies.Strategy)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Strategies.StrategyNameGenerator" />.
            </summary>
      <param name="strategy">Стратегия.</param>
    </member>
    <member name="E:StockSharp.Algo.Strategies.StrategyNameGenerator.Changed">
      <summary>
            Событие изменения имени.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.StrategyNameGenerator.AutoGenerateStrategyName">
      <summary>
            Использовать ли автоматическую генерацию имени стратегии. По-умолчанию включено.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.StrategyNameGenerator.ShortName">
      <summary>
            Короткое название стратегии.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.StrategyNameGenerator.Pattern">
      <summary>
            Паттерн для формирования имени стратегии.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.StrategyNameGenerator.Value">
      <summary>
            Сгенерированное или установленное имя стратегии.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.IStrategyParam">
      <summary>
            Параметр стратегии.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.IStrategyParam.Name">
      <summary>
            Название параметра.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.IStrategyParam.Value">
      <summary>
            Значение параметра.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.IStrategyParam.OptimizeFrom">
      <summary>
            Значение От при оптимизации.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.IStrategyParam.OptimizeTo">
      <summary>
            Значение До при оптимизации.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.IStrategyParam.OptimizeStep">
      <summary>
            Значение Шаг при оптимизации.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.StrategyParam`1">
      <summary>
            Обертка для типизированного доступа к параметру стратегии.
            </summary>
      <typeparam name="T">Тип значения параметра.</typeparam>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyParam`1.#ctor(StockSharp.Algo.Strategies.Strategy,System.String)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Strategies.StrategyParam`1" />.
            </summary>
      <param name="strategy">Стратегия.</param>
      <param name="name">Название параметра.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyParam`1.#ctor(StockSharp.Algo.Strategies.Strategy,System.String,`0)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Strategies.StrategyParam`1" />.
            </summary>
      <param name="strategy">Стратегия.</param>
      <param name="name">Название параметра.</param>
      <param name="initialValue">Первоначальное значение.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyParam`1.Load(Ecng.Serialization.SettingsStorage)">
      <summary>
            Загрузить настройки.
            </summary>
      <param name="storage">Хранилище настроек.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyParam`1.Save(Ecng.Serialization.SettingsStorage)">
      <summary>
            Сохранить настройки.
            </summary>
      <param name="storage">Хранилище настроек.</param>
    </member>
    <member name="P:StockSharp.Algo.Strategies.StrategyParam`1.Name">
      <summary>
            Название параметра.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.StrategyParam`1.AllowNull">
      <summary>
            Возможно ли в <see cref="P:StockSharp.Algo.Strategies.StrategyParam`1.Value" /> хранить значение, равное null.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.StrategyParam`1.Value">
      <summary>
            Значение параметра.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.StrategyParam`1.OptimizeFrom">
      <summary>
            Значение От при оптимизации.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.StrategyParam`1.OptimizeTo">
      <summary>
            Значение До при оптимизации.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.StrategyParam`1.OptimizeStep">
      <summary>
            Значение Шаг при оптимизации.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.StrategyParamHelper">
      <summary>
            Вспомогательный класс для с <see cref="T:StockSharp.Algo.Strategies.StrategyParam`1" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyParamHelper.Param``1(StockSharp.Algo.Strategies.Strategy,System.String,``0)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Strategies.StrategyParam`1" />.
            </summary>
      <typeparam name="T">Тип значения параметра.</typeparam>
      <param name="strategy">Стратегия.</param>
      <param name="name">Название параметра.</param>
      <param name="initialValue">Первоначальное значение.</param>
      <returns>Параметр стратегии.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyParamHelper.Optimize``1(StockSharp.Algo.Strategies.StrategyParam{``0},``0,``0,``0)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Strategies.StrategyParam`1" />.
            </summary>
      <typeparam name="T">Тип значения параметра.</typeparam>
      <param name="param">Параметр стратегии.</param>
      <param name="optimizeFrom">Значение От при оптимизации.</param>
      <param name="optimizeTo">Значение До при оптимизации.</param>
      <param name="optimizeStep">Значение Шаг при оптимизации.</param>
      <returns>Параметр стратегии.</returns>
    </member>
    <member name="T:StockSharp.Algo.Strategies.Testing.EmulationMarketDataModes">
      <summary>
            Тип данных для эмуляции.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Strategies.Testing.EmulationMarketDataModes.Storage">
      <summary>
            Хранилище.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Strategies.Testing.EmulationMarketDataModes.Generate">
      <summary>
            Сгенерированные.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Strategies.Testing.EmulationMarketDataModes.No">
      <summary>
            Никакие.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.Testing.EmulationSettings">
      <summary>
            Настройки эмуляции.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Testing.EmulationSettings.#ctor">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Strategies.Testing.EmulationSettings" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Testing.EmulationSettings.Save(Ecng.Serialization.SettingsStorage)">
      <summary>
            Сохранить состояние параметров эмуляции.
            </summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Testing.EmulationSettings.Load(Ecng.Serialization.SettingsStorage)">
      <summary>
            Загрузить состояние параметров эмуляции.
            </summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Testing.EmulationSettings.StartTime">
      <summary>
            Дата в истории, с которой необходимо начать эмуляцию.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Testing.EmulationSettings.StopTime">
      <summary>
            Дата в истории, на которой необходимо закончить эмуляцию (дата включается).
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Testing.EmulationSettings.MarketTimeChangedInterval">
      <summary>
            Интервал изменения времени.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Testing.EmulationSettings.UnrealizedPnLInterval">
      <summary>
            Интервал пересчета нереализованной прибыли.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Testing.EmulationSettings.TradeDataMode">
      <summary>
            Какие использовать сделки.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Testing.EmulationSettings.DepthDataMode">
      <summary>
            Какие использовать стаканы.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Testing.EmulationSettings.OrderLogDataMode">
      <summary>
            Использовать лог заявок.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Testing.EmulationSettings.BatchSize">
      <summary>
            Количество одновременно тестируемых стратегий.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Testing.EmulationSettings.LogLevel">
      <summary>
            Уровень логирования.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.ProcessResults">
      <summary>
            Результаты работы одной итерации торговой стратегии.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Strategies.ProcessResults.Continue">
      <summary>
            Продолжить работу дальше.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Strategies.ProcessResults.Stop">
      <summary>
            Прекратить работу стратегии.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.TimeFrameStrategy">
      <summary>
            Торговая стратегия, основанное на тайм-фрейме.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.TimeFrameStrategy.#ctor(System.TimeSpan)">
      <summary>
            Инициализировать <see cref="T:StockSharp.Algo.Strategies.TimeFrameStrategy" />.
            </summary>
      <param name="timeFrame">Таймфрейм стратегии.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.TimeFrameStrategy.OnStarted">
      <summary>
            Метод вызывается тогда, когда вызвался метод <see cref="M:StockSharp.Algo.Strategies.Strategy.Start" />, и состояние <see cref="P:StockSharp.Algo.Strategies.Strategy.ProcessState" /> перешло в значение <see cref="F:StockSharp.Algo.ProcessStates.Started" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.TimeFrameStrategy.OnProcess">
      <summary>
            Реализация торгового алгоритма.
            </summary>
      <returns>
            Результат работы одной итерации торгового алгоритма.
            </returns>
    </member>
    <member name="P:StockSharp.Algo.Strategies.TimeFrameStrategy.TimeFrame">
      <summary>
            Таймфрейм стратегии.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.TimeFrameStrategy.Interval">
      <summary>
            Интервал запуска стратегии. По умолчанию равен <see cref="P:StockSharp.Algo.Strategies.TimeFrameStrategy.TimeFrame" />.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.Derivatives.VolatilityQuotingStrategy">
      <summary>
            Котирование опционов по волатильности.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Derivatives.VolatilityQuotingStrategy.#ctor(StockSharp.Messages.Sides,System.Decimal,Ecng.ComponentModel.Range{System.Decimal})">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Strategies.Derivatives.VolatilityQuotingStrategy" />.
            </summary>
      <param name="quotingDirection">Направление котирования.</param>
      <param name="quotingVolume">Объем, который необходимо скотировать.</param>
      <param name="ivRange">Границы волатильности.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Derivatives.VolatilityQuotingStrategy.GetAcceptablePriceRange">
      <summary>
            Получить приемлемый диапазон цены, попадая в который текущая заявка не будет перерегистрирована.
            </summary>
      <returns>Приемлемый диапазон цены. Если невозможно вычислить диапазон на данный момент, то будет возвращено null.</returns>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Derivatives.VolatilityQuotingStrategy.IVRange">
      <summary>
            Границы волатильности.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Derivatives.VolatilityQuotingStrategy.Security">
      <summary>
            Инструмент.
            </summary>
    </member>
  </members>
</doc>